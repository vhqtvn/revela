{{ $backup_verify_cronjob := lookup "batch/v1" "CronJob" $.Release.Namespace (print (include "backup.fullname" .) "-backup-verify")}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "backup.fullname" . }}-backup-verify
  labels:
    {{- include "backup.labels" . | nindent 4 }}
    app.kubernetes.io/name: backup-verify
spec:
  concurrencyPolicy: Replace
  suspend: {{ not .Values.backup.enable }}
  schedule: {{ .Values.backup_verify.schedule | quote }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "backup.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/name: backup-verify
          annotations:
            seccomp.security.alpha.kubernetes.io/pod: runtime/default
        spec:
          restartPolicy: Never
          terminationGracePeriodSeconds: 0
          containers:
          - name: backup-verify
            {{- if and $backup_verify_cronjob (not $.Values.manageImages) }} # if the statefulset already exists and we do not want helm to simply overwrite the image, use the existing image
            image: {{ (first $backup_verify_cronjob.spec.jobTemplate.spec.template.spec.containers).image }}
            {{- else }}
            image: {{ .Values.backup.image.repo }}:{{ .Values.backup.image.tag | default .Values.imageTag }}
            {{- end }}
            imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
            command:
            - /usr/local/bin/aptos-db-tool
            - backup
            - verify
            {{- range $.Values.restore.config.trusted_waypoints }}
            - --trust-waypoint
            - {{ . }}
            {{- end }}
            - --metadata-cache-dir
            - /tmp/aptos-backup-verify-metadata
            - --command-adapter-config
            # use the same config with the backup sts
            - /opt/aptos/etc/{{ .Values.backup.config.location }}.yaml
            env:
            - name: RUST_LOG
              value: "info"
            - name: RUST_BACKTRACE
              value: "1"
            {{- if (include "backup.pushMetricsEndpoint" $) }}
            - name: KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PUSH_METRICS_ENDPOINT
              value: "{{- include "backup.pushMetricsEndpoint" $ }}/api/v1/import/prometheus?extra_label=role={{- .jobName | default "db_backup_verify" }}&extra_label=kubernetes_pod_name=$(KUBERNETES_POD_NAME)"
            {{- end }}
            {{- include "backup.backupEnvironment" (dict "config" $.Values.backup.config "era" $.Values.chain.era) | nindent 12 }}
            {{- with .Values.backup_verify }}
            resources:
            {{- toYaml .resources | nindent 14 }}
            volumeMounts:
            - name: backup-config
              mountPath: /opt/aptos/etc
            - name: tmp
              mountPath: /tmp
            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
          securityContext:
            runAsNonRoot: true
            runAsUser: 6180
            runAsGroup: 6180
            fsGroup: 6180
          {{- with .nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          volumes:
          - name: backup-config
            configMap:
              name: {{ include "backup.fullname" . }}-backup
          - name: tmp
            emptyDir: {}
          serviceAccountName: {{ include "backup.serviceAccount" . }}
          {{- if .Values.imagePullSecret }}
          imagePullSecrets:
          - name: {{.Values.imagePullSecret}}
          {{- end }}
