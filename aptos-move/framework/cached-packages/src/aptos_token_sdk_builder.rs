// Copyright (c) Aptos
// SPDX-License-Identifier: Apache-2.0

// This file was generated. Do not modify!
//
// To update this code, run: `cargo run --release -p framework`.

// Conversion library between a structured representation of a Move script call (`ScriptCall`) and the
// standard BCS-compatible representation used in Aptos transactions (`Script`).
//
// This code was generated by compiling known Script interfaces ("ABIs") with the tool `aptos-sdk-builder`.

#![allow(unused_imports)]
use aptos_types::{
    account_address::AccountAddress,
    transaction::{ScriptFunction, TransactionPayload},
};
use move_deps::move_core_types::{
    ident_str,
    language_storage::{ModuleId, TypeTag},
};

type Bytes = Vec<u8>;

/// Structured representation of a call into a known Move script function.
/// ```ignore
/// impl ScriptFunctionCall {
///     pub fn encode(self) -> TransactionPayload { .. }
///     pub fn decode(&TransactionPayload) -> Option<ScriptFunctionCall> { .. }
/// }
/// ```
#[derive(Clone, Debug, PartialEq)]
#[cfg_attr(feature = "fuzzing", derive(proptest_derive::Arbitrary))]
#[cfg_attr(feature = "fuzzing", proptest(no_params))]
pub enum ScriptFunctionCall {
    /// create a empty token collection with parameters
    TokenV1CreateCollectionScript {
        name: Bytes,
        description: Bytes,
        uri: Bytes,
        maximum: u64,
        mutate_setting: Vec<bool>,
    },

    /// create token with raw inputs
    TokenV1CreateTokenScript {
        collection: Bytes,
        name: Bytes,
        description: Bytes,
        balance: u64,
        maximum: u64,
        uri: Bytes,
        royalty_payee_address: AccountAddress,
        royalty_points_denominator: u64,
        royalty_points_nominator: u64,
        token_mutate_setting: Vec<bool>,
        property_keys: Vec<Bytes>,
        property_values: Vec<Bytes>,
        property_types: Vec<Bytes>,
    },

    TokenV1DirectTransferScript {
        creators_address: AccountAddress,
        collection: Bytes,
        name: Bytes,
        amount: u64,
        serial_number: u64,
    },

    TokenV1InitializeTokenScript {},

    /// Mint more token from an existing token_data. Mint only adds more token to serial_number 0
    TokenV1Mint {
        token_data_address: AccountAddress,
        collection: Bytes,
        name: Bytes,
        amount: u64,
    },
}

impl ScriptFunctionCall {
    /// Build an Aptos `TransactionPayload` from a structured object `ScriptFunctionCall`.
    pub fn encode(self) -> TransactionPayload {
        use ScriptFunctionCall::*;
        match self {
            TokenV1CreateCollectionScript {
                name,
                description,
                uri,
                maximum,
                mutate_setting,
            } => token_v1_create_collection_script(name, description, uri, maximum, mutate_setting),
            TokenV1CreateTokenScript {
                collection,
                name,
                description,
                balance,
                maximum,
                uri,
                royalty_payee_address,
                royalty_points_denominator,
                royalty_points_nominator,
                token_mutate_setting,
                property_keys,
                property_values,
                property_types,
            } => token_v1_create_token_script(
                collection,
                name,
                description,
                balance,
                maximum,
                uri,
                royalty_payee_address,
                royalty_points_denominator,
                royalty_points_nominator,
                token_mutate_setting,
                property_keys,
                property_values,
                property_types,
            ),
            TokenV1DirectTransferScript {
                creators_address,
                collection,
                name,
                amount,
                serial_number,
            } => token_v1_direct_transfer_script(
                creators_address,
                collection,
                name,
                amount,
                serial_number,
            ),
            TokenV1InitializeTokenScript {} => token_v1_initialize_token_script(),
            TokenV1Mint {
                token_data_address,
                collection,
                name,
                amount,
            } => token_v1_mint(token_data_address, collection, name, amount),
        }
    }

    /// Try to recognize an Aptos `TransactionPayload` and convert it into a structured object `ScriptFunctionCall`.
    pub fn decode(payload: &TransactionPayload) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(script) = payload {
            match SCRIPT_FUNCTION_DECODER_MAP.get(&format!(
                "{}_{}",
                script.module().name(),
                script.function()
            )) {
                Some(decoder) => decoder(payload),
                None => None,
            }
        } else {
            None
        }
    }
}

/// create a empty token collection with parameters
pub fn token_v1_create_collection_script(
    name: Vec<u8>,
    description: Vec<u8>,
    uri: Vec<u8>,
    maximum: u64,
    mutate_setting: Vec<bool>,
) -> TransactionPayload {
    TransactionPayload::ScriptFunction(ScriptFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("token_v1").to_owned(),
        ),
        ident_str!("create_collection_script").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&name).unwrap(),
            bcs::to_bytes(&description).unwrap(),
            bcs::to_bytes(&uri).unwrap(),
            bcs::to_bytes(&maximum).unwrap(),
            bcs::to_bytes(&mutate_setting).unwrap(),
        ],
    ))
}

/// create token with raw inputs
pub fn token_v1_create_token_script(
    collection: Vec<u8>,
    name: Vec<u8>,
    description: Vec<u8>,
    balance: u64,
    maximum: u64,
    uri: Vec<u8>,
    royalty_payee_address: AccountAddress,
    royalty_points_denominator: u64,
    royalty_points_nominator: u64,
    token_mutate_setting: Vec<bool>,
    property_keys: Vec<Vec<u8>>,
    property_values: Vec<Vec<u8>>,
    property_types: Vec<Vec<u8>>,
) -> TransactionPayload {
    TransactionPayload::ScriptFunction(ScriptFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("token_v1").to_owned(),
        ),
        ident_str!("create_token_script").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&collection).unwrap(),
            bcs::to_bytes(&name).unwrap(),
            bcs::to_bytes(&description).unwrap(),
            bcs::to_bytes(&balance).unwrap(),
            bcs::to_bytes(&maximum).unwrap(),
            bcs::to_bytes(&uri).unwrap(),
            bcs::to_bytes(&royalty_payee_address).unwrap(),
            bcs::to_bytes(&royalty_points_denominator).unwrap(),
            bcs::to_bytes(&royalty_points_nominator).unwrap(),
            bcs::to_bytes(&token_mutate_setting).unwrap(),
            bcs::to_bytes(&property_keys).unwrap(),
            bcs::to_bytes(&property_values).unwrap(),
            bcs::to_bytes(&property_types).unwrap(),
        ],
    ))
}

pub fn token_v1_direct_transfer_script(
    creators_address: AccountAddress,
    collection: Vec<u8>,
    name: Vec<u8>,
    amount: u64,
    serial_number: u64,
) -> TransactionPayload {
    TransactionPayload::ScriptFunction(ScriptFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("token_v1").to_owned(),
        ),
        ident_str!("direct_transfer_script").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&creators_address).unwrap(),
            bcs::to_bytes(&collection).unwrap(),
            bcs::to_bytes(&name).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
            bcs::to_bytes(&serial_number).unwrap(),
        ],
    ))
}

pub fn token_v1_initialize_token_script() -> TransactionPayload {
    TransactionPayload::ScriptFunction(ScriptFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("token_v1").to_owned(),
        ),
        ident_str!("initialize_token_script").to_owned(),
        vec![],
        vec![],
    ))
}

/// Mint more token from an existing token_data. Mint only adds more token to serial_number 0
pub fn token_v1_mint(
    token_data_address: AccountAddress,
    collection: Vec<u8>,
    name: Vec<u8>,
    amount: u64,
) -> TransactionPayload {
    TransactionPayload::ScriptFunction(ScriptFunction::new(
        ModuleId::new(
            AccountAddress::new([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 1,
            ]),
            ident_str!("token_v1").to_owned(),
        ),
        ident_str!("mint").to_owned(),
        vec![],
        vec![
            bcs::to_bytes(&token_data_address).unwrap(),
            bcs::to_bytes(&collection).unwrap(),
            bcs::to_bytes(&name).unwrap(),
            bcs::to_bytes(&amount).unwrap(),
        ],
    ))
}
mod decoder {
    use super::*;
    pub fn token_v1_create_collection_script(
        payload: &TransactionPayload,
    ) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(script) = payload {
            Some(ScriptFunctionCall::TokenV1CreateCollectionScript {
                name: bcs::from_bytes(script.args().get(0)?).ok()?,
                description: bcs::from_bytes(script.args().get(1)?).ok()?,
                uri: bcs::from_bytes(script.args().get(2)?).ok()?,
                maximum: bcs::from_bytes(script.args().get(3)?).ok()?,
                mutate_setting: bcs::from_bytes(script.args().get(4)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn token_v1_create_token_script(
        payload: &TransactionPayload,
    ) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(script) = payload {
            Some(ScriptFunctionCall::TokenV1CreateTokenScript {
                collection: bcs::from_bytes(script.args().get(0)?).ok()?,
                name: bcs::from_bytes(script.args().get(1)?).ok()?,
                description: bcs::from_bytes(script.args().get(2)?).ok()?,
                balance: bcs::from_bytes(script.args().get(3)?).ok()?,
                maximum: bcs::from_bytes(script.args().get(4)?).ok()?,
                uri: bcs::from_bytes(script.args().get(5)?).ok()?,
                royalty_payee_address: bcs::from_bytes(script.args().get(6)?).ok()?,
                royalty_points_denominator: bcs::from_bytes(script.args().get(7)?).ok()?,
                royalty_points_nominator: bcs::from_bytes(script.args().get(8)?).ok()?,
                token_mutate_setting: bcs::from_bytes(script.args().get(9)?).ok()?,
                property_keys: bcs::from_bytes(script.args().get(10)?).ok()?,
                property_values: bcs::from_bytes(script.args().get(11)?).ok()?,
                property_types: bcs::from_bytes(script.args().get(12)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn token_v1_direct_transfer_script(
        payload: &TransactionPayload,
    ) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(script) = payload {
            Some(ScriptFunctionCall::TokenV1DirectTransferScript {
                creators_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                collection: bcs::from_bytes(script.args().get(1)?).ok()?,
                name: bcs::from_bytes(script.args().get(2)?).ok()?,
                amount: bcs::from_bytes(script.args().get(3)?).ok()?,
                serial_number: bcs::from_bytes(script.args().get(4)?).ok()?,
            })
        } else {
            None
        }
    }

    pub fn token_v1_initialize_token_script(
        payload: &TransactionPayload,
    ) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(_script) = payload {
            Some(ScriptFunctionCall::TokenV1InitializeTokenScript {})
        } else {
            None
        }
    }

    pub fn token_v1_mint(payload: &TransactionPayload) -> Option<ScriptFunctionCall> {
        if let TransactionPayload::ScriptFunction(script) = payload {
            Some(ScriptFunctionCall::TokenV1Mint {
                token_data_address: bcs::from_bytes(script.args().get(0)?).ok()?,
                collection: bcs::from_bytes(script.args().get(1)?).ok()?,
                name: bcs::from_bytes(script.args().get(2)?).ok()?,
                amount: bcs::from_bytes(script.args().get(3)?).ok()?,
            })
        } else {
            None
        }
    }
}

type ScriptFunctionDecoderMap = std::collections::HashMap<
    String,
    Box<
        dyn Fn(&TransactionPayload) -> Option<ScriptFunctionCall>
            + std::marker::Sync
            + std::marker::Send,
    >,
>;

static SCRIPT_FUNCTION_DECODER_MAP: once_cell::sync::Lazy<ScriptFunctionDecoderMap> =
    once_cell::sync::Lazy::new(|| {
        let mut map: ScriptFunctionDecoderMap = std::collections::HashMap::new();
        map.insert(
            "token_v1_create_collection_script".to_string(),
            Box::new(decoder::token_v1_create_collection_script),
        );
        map.insert(
            "token_v1_create_token_script".to_string(),
            Box::new(decoder::token_v1_create_token_script),
        );
        map.insert(
            "token_v1_direct_transfer_script".to_string(),
            Box::new(decoder::token_v1_direct_transfer_script),
        );
        map.insert(
            "token_v1_initialize_token_script".to_string(),
            Box::new(decoder::token_v1_initialize_token_script),
        );
        map.insert(
            "token_v1_mint".to_string(),
            Box::new(decoder::token_v1_mint),
        );
        map
    });
