version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  aws-ecr: circleci/aws-ecr@7.3.0

jobs:
  build-benchmarks:
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    steps:
      - dev-setup
      - run: cargo x bench --no-run
  crypto:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - dev-setup
      - run: cargo nextest --nextest-profile ci --package aptos-crypto --features='u32' --no-default-features
      - run: cargo nextest --nextest-profile ci --package aptos-crypto --features='u64' --no-default-features
  lint:
    docker:
      - image: cimg/base:2020.01
    resource_class: medium
    steps:
      - dev-setup
      - run: sudo apt-get install shellcheck --assume-yes --no-install-recommends
      - run: shellcheck scripts/dev_setup.sh
      - run: shellcheck scripts/dockerhub_prune.sh
      - run: shellcheck docker/build_push.sh
      - run: shellcheck docker/docker_republish.sh
      - run: shellcheck scripts/weekly-dep-report.sh
      - run: cargo x lint
      - run: cargo xclippy --workspace --all-targets
      - run: cargo fmt
      - run: cargo xfmt --check
  e2e-test:
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    steps:
      - dev-setup
      - run: RUST_BACKTRACE=full cargo nextest --nextest-profile ci --partition hash:1/1 --jobs 8 --test-threads 2 --package smoke-test
  unit-test:
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    steps:
      - dev-setup
      - run: cargo xtest --package jsonrpc-integration-tests --changed-since "origin/main"
      - run: cargo xtest --doc --jobs 8 --unit --changed-since "origin/main"
      - run: cargo nextest --nextest-profile ci --partition hash:1/1 --jobs 6 --test-threads 8 --unit --exclude backup-cli --changed-since "origin/main"
  docker-build-push:
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    parameters:
      image-name:
        type: string
      target-image-name:
        type: string
    steps:
      - checkout
      - run:
          command: ./docker/<< parameters.image-name >>/build.sh
          no_output_timeout: 30m
      - aws-setup
      - run: SOURCE=diem/<< parameters.target-image-name >>:latest TARGET_REPO="${AWS_ECR_ACCOUNT_URL}/diem/<< parameters.target-image-name >>" TARGET_TAGS="${TAGS}:main_$(git rev-parse --short=8  HEAD),latest" docker/tag-and-push.sh
  # a dummy job so that we can require auto or canary branches
  require-bors:
    machine:
      image: ubuntu-2004:current
    steps:
      - run: echo "hello from bors"
workflows:
  build-test-deploy:
    jobs:
#      - build-benchmarks
      - crypto
      - e2e-test
      - lint
      - unit-test
  docker-build-push:
    jobs:
      - require-bors:
          filters:
            branches:
              only:
                - auto
                - canary
      - docker-build-push:
          name: docker-validator
          image-name: validator
          target-image-name: validator
          context: aws-dev
          requires:
            - require-bors
      - docker-build-push:
          name: docker-forge
          image-name: forge
          target-image-name: forge
          context: aws-dev
          requires:
            - require-bors
      - docker-build-push:
          name: docker-tools
          image-name: tools
          target-image-name: tools
          context: aws-dev
          requires:
            - require-bors
      - docker-build-push:
          name: docker-init
          image-name: init
          target-image-name: init
          context: aws-dev
          requires:
            - require-bors
      - docker-build-push:
          name: docker-faucet
          image-name: faucet
          target-image-name: faucet
          context: aws-dev
          requires:
            - require-bors
      - docker-build-push:
          name: docker-safety-rules
          image-name: safety-rules
          target-image-name: validator_tcb
          context: aws-dev
          requires:
            - require-bors
commands:
  dev-setup:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install build-essential ca-certificates clang curl git libssl-dev pkg-config --no-install-recommends --assume-yes
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      - run: cat $HOME/.cargo/env >> $BASH_ENV
  aws-setup:
    steps:
      - run:
          name: Compose AWS Env Variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="${AWS_ECR_ACCOUNT_NUM}.dkr.ecr.${AWS_REGION}.amazonaws.com"' >> $BASH_ENV
      - aws-cli/install
      # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
      - aws-cli/setup
      - aws-ecr/ecr-login
