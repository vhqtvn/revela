version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  build-benchmarks:
    machine:
      image: ubuntu-2004:current
    resource_class: xlarge
    steps:
      - dev-setup
      - run: cargo x bench --no-run
  crypto:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - dev-setup
      - run: cargo nextest --nextest-profile ci --package aptos-crypto --features='u32' --no-default-features
      - run: cargo nextest --nextest-profile ci --package aptos-crypto --features='u64' --no-default-features
  lint:
    docker:
      - image: cimg/base:2020.01
    resource_class: medium
    steps:
      - dev-setup
      - run: sudo apt-get install shellcheck --assume-yes --no-install-recommends
      - run: shellcheck scripts/dev_setup.sh
      - run: shellcheck scripts/dockerhub_prune.sh
      - run: shellcheck docker/build_push.sh
      - run: shellcheck docker/docker_republish.sh
      - run: shellcheck scripts/weekly-dep-report.sh
      - run: cargo x lint
      - run: cargo xclippy --workspace --all-targets
      - run: cargo fmt
      - run: cargo xfmt --check
  e2e-test:
    machine:
      image: ubuntu-2004:current
    resource_class: 2xlarge
    steps:
      - dev-setup
      - run: RUST_BACKTRACE=full cargo nextest --nextest-profile ci --partition hash:1/1 --test-threads 5 --package smoke-test
  unit-test:
    machine:
      image: ubuntu-2004:current
    resource_class: 2xlarge
    steps:
      - dev-setup
      - run: cargo xtest --doc --unit --changed-since "origin/main"
      - run: cargo nextest --nextest-profile ci --partition hash:1/1 --unit --exclude backup-cli --changed-since "origin/main"
  docker-build-push:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - aws-setup
      - run: echo "export IMAGE_TAG=dev_$(git rev-parse --short=8 HEAD)" >> $BASH_ENV
      - run:
          name: Build or skip
          shell: /bin/bash
          command: |
            aws ecr describe-images --repository-name="aptos/validator" --image-ids=imageTag=$IMAGE_TAG
            ret=$?
            if [ $ret -ne 0 ]; then
              echo "Image tag $IMAGE_TAG not present. Starting build..."
              ./docker/build-aws.sh --build-all --version $(git rev-parse --short=8 HEAD) --addl_tags latest
            else
              echo "Image tag $IMAGE_TAG already present. Skipping build..."
            fi
  forge-k8s:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - aws-setup
      - kubernetes/install-kubectl
      - run: echo "export IMAGE_TAG=dev_$(git rev-parse --short=8 HEAD)" >> $BASH_ENV
      # since we're running with `--build-all`, assume that if it passes, we have all images required for Forge
      - run: aws ecr describe-images --repository-name="aptos/validator" --image-ids=imageTag=$IMAGE_TAG
      # XXX: make forge non-blocking for now
      - run: ./scripts/fgi/run --tag $IMAGE_TAG --suite land_blocking || true
      - run:
          name: Post Forge Results to GitHub PR
          shell: /bin/bash
          command: |
            commit_message=$(git log -1 --pretty=%B)
            PR_NUMBER=$(echo "${commit_message}" | grep 'Closes: #' | tail -1 | sed 's/Closes: #//')

            curl -s -H "Authorization: token ${FORGE_GH_TOKEN}" \
            -X POST -d "{\"body\": \"Forge run: ${CIRCLE_BUILD_URL}\"}" \
            "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${PR_NUMBER}/comments"
            exit 0

  # a dummy job so that we can require auto or canary branches
  require-bors:
    machine:
      image: ubuntu-2004:current
    steps:
      - run: echo "hello from bors"
workflows:
  build-test-deploy:
    jobs:
#      - build-benchmarks
      - crypto
      - e2e-test
      - lint
      - unit-test
      ### bors-controlled workflows ###
      - require-bors:
          filters:
            branches:
              only:
                - auto
                - canary
      - docker-build-push:
          context: aws-dev
          requires:
            - require-bors
      - forge-k8s:
          context: aws-dev
          requires:
            - docker-build-push
commands:
  dev-setup:
    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install build-essential ca-certificates clang curl git libssl-dev pkg-config --no-install-recommends --assume-yes
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
      - run: cat $HOME/.cargo/env >> $BASH_ENV
  aws-setup:
    steps:
      - aws-cli/install
      # AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
      - aws-cli/setup
