generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model diesel_schema_migrations {
  version String   @id @db.VarChar(50)
  run_on  DateTime @default(now()) @db.Timestamp(6)

  @@map("__diesel_schema_migrations")
}

model block_metadata_transactions {
  hash                        String       @id @db.VarChar(255)
  id                          String       @db.VarChar(255)
  round                       BigInt
  previous_block_votes        Json
  proposer                    String       @db.VarChar(255)
  timestamp                   DateTime     @db.Timestamp(6)
  inserted_at                 DateTime     @default(now()) @db.Timestamp(6)
  epoch                       BigInt
  previous_block_votes_bitmap Json
  transactions                transactions @relation(fields: [hash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions")
}

model events {
  transaction_hash String       @db.VarChar(255)
  key              String       @db.VarChar(100)
  sequence_number  BigInt
  type             String
  data             Json
  inserted_at      DateTime     @default(now()) @db.Timestamp(6)
  transactions     transactions @relation(fields: [transaction_hash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions")

  @@id([key, sequence_number])
  @@index([key, sequence_number, type], map: "event_key_seq_type_index")
}

model processor_statuses {
  name         String   @db.VarChar(50)
  version      BigInt
  success      Boolean
  details      String?
  last_updated DateTime @default(now()) @db.Timestamp(6)

  @@id([name, version])
}

model transactions {
  type                        String                       @db.VarChar(255)
  payload                     Json
  version                     BigInt                       @unique
  hash                        String                       @id @db.VarChar(255)
  state_root_hash             String                       @db.VarChar(255)
  event_root_hash             String                       @db.VarChar(255)
  gas_used                    BigInt
  success                     Boolean
  vm_status                   String
  accumulator_root_hash       String                       @db.VarChar(255)
  inserted_at                 DateTime                     @default(now()) @db.Timestamp(6)
  block_metadata_transactions block_metadata_transactions?
  events                      events[]
  user_transactions           user_transactions?
  write_set_changes           write_set_changes[]
}

model user_transactions {
  hash                      String       @id @db.VarChar(255)
  signature                 Json
  sender                    String       @db.VarChar(255)
  sequence_number           BigInt
  max_gas_amount            BigInt
  expiration_timestamp_secs DateTime     @db.Timestamp(6)
  gas_unit_price            BigInt
  timestamp                 DateTime     @db.Timestamp(6)
  inserted_at               DateTime     @default(now()) @db.Timestamp(6)
  transactions              transactions @relation(fields: [hash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions")

  @@unique([sender, sequence_number])
  @@index([sender], map: "ut_sender_index")
}

model write_set_changes {
  transaction_hash String       @db.VarChar(255)
  hash             String       @db.VarChar(255)
  type             String
  address          String       @db.VarChar(255)
  module           Json
  resource         Json
  data             Json
  inserted_at      DateTime     @default(now()) @db.Timestamp(6)
  transactions     transactions @relation(fields: [transaction_hash], references: [hash], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions")

  @@id([transaction_hash, hash])
  @@index([transaction_hash, address, type], map: "write_set_changes_tx_hash_addr_type_index")
}
