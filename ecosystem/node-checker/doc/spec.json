{
  "openapi": "3.0.0",
  "info": {
    "title": "Aptos Node Checker",
    "version": "0.1.1"
  },
  "servers": [
    {
      "url": "http://0.0.0.0:20121/"
    }
  ],
  "tags": [],
  "paths": {
    "/check_node": {
      "get": {
        "summary": "Check the health of a given target node. You may specify a baseline\nnode configuration to use for the evaluation. If you don't specify\na baseline node configuration, we will attempt to determine the\nappropriate baseline based on your target node.",
        "parameters": [
          {
            "name": "node_url",
            "schema": {
              "type": "string",
              "format": "url"
            },
            "in": "query",
            "description": "The URL of the node to check. e.g. http://44.238.19.217 or http://fullnode.mysite.com",
            "required": true,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "baseline_configuration_name",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "The name of the baseline node configuration to use for the evaluation, e.g. devnet_fullnode",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "metrics_port",
            "schema": {
              "type": "integer",
              "format": "uint16",
              "default": 9101
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "api_port",
            "schema": {
              "type": "integer",
              "format": "uint16",
              "default": 8080
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "noise_port",
            "schema": {
              "type": "integer",
              "format": "uint16",
              "default": 6180
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          },
          {
            "name": "public_key",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "A public key for the node, e.g. 0x44fd1324c66371b4788af0b901c9eb8088781acb29e6b8b9c791d5d9838fbe1f.\nThis is only necessary for certain evaluators, e.g. HandshakeEvaluator.",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationSummary"
                }
              }
            }
          }
        }
      }
    },
    "/check_preconfigured_node": {
      "get": {
        "summary": "Check the health of the preconfigured node. If none was specified when\nthis instance of the node checker was started, this will return an error.\nYou may specify a baseline node configuration to use for the evaluation.\nIf you don't specify a baseline node configuration, we will attempt to\ndetermine the appropriate baseline based on your target node.",
        "parameters": [
          {
            "name": "baseline_configuration_name",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": false,
            "deprecated": false,
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EvaluationSummary"
                }
              }
            }
          }
        }
      }
    },
    "/get_configurations": {
      "get": {
        "summary": "Get the different baseline configurations the instance of NHC is\nconfigured with. This method is best effort, it is infeasible to\nderive (or even represent) some fields of the spec via OpenAPI,\nso note that some fields will be missing from the response.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeConfiguration"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_configuration_keys": {
      "get": {
        "summary": "Get just the keys and pretty names for the configurations, meaning\nthe configuration_name and configuration_name_pretty fields.",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationKey"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BlockingRunnerArgs": {
        "type": "object",
        "required": [
          "metrics_fetch_delay_secs",
          "api_client_timeout_secs"
        ],
        "properties": {
          "metrics_fetch_delay_secs": {
            "type": "integer",
            "format": "uint64"
          },
          "api_client_timeout_secs": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "BuildVersionEvaluatorArgs": {
        "type": "object"
      },
      "ConfigurationKey": {
        "type": "object",
        "required": [
          "key",
          "pretty_name"
        ],
        "properties": {
          "key": {
            "type": "string"
          },
          "pretty_name": {
            "type": "string"
          }
        }
      },
      "ConsensusProposalsEvaluatorArgs": {
        "type": "object"
      },
      "ConsensusRoundEvaluatorArgs": {
        "type": "object"
      },
      "ConsensusTimeoutsEvaluatorArgs": {
        "type": "object",
        "required": [
          "allowed_consensus_timeouts"
        ],
        "properties": {
          "allowed_consensus_timeouts": {
            "type": "integer",
            "format": "uint64",
            "description": "The amount by which timeouts are allowed to increase between each\nround of metrics collection."
          }
        }
      },
      "EvaluationResult": {
        "type": "object",
        "required": [
          "headline",
          "score",
          "explanation",
          "evaluator_name",
          "category",
          "links"
        ],
        "properties": {
          "headline": {
            "type": "string",
            "description": "Headline of the evaluation, e.g. \"Healthy!\" or \"Metrics missing!\"."
          },
          "score": {
            "type": "integer",
            "format": "uint8",
            "description": "Score out of 100."
          },
          "explanation": {
            "type": "string",
            "description": "Explanation of the evaluation."
          },
          "evaluator_name": {
            "type": "string",
            "description": "Name of the evaluator where the evaluation came from, e.g. state_sync_version."
          },
          "category": {
            "type": "string",
            "description": "Category of the evaluator where the evaluation came from, e.g. state_sync."
          },
          "links": {
            "type": "array",
            "description": "Links that might help the user fix a potential problem.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EvaluationSummary": {
        "type": "object",
        "required": [
          "evaluation_results",
          "summary_score",
          "summary_explanation"
        ],
        "properties": {
          "evaluation_results": {
            "type": "array",
            "description": "Results from all the evaluations NHC ran.",
            "items": {
              "$ref": "#/components/schemas/EvaluationResult"
            }
          },
          "summary_score": {
            "type": "integer",
            "format": "uint8",
            "description": "An aggeregated summary (method TBA)."
          },
          "summary_explanation": {
            "type": "string",
            "description": "An overall explanation of the results."
          }
        }
      },
      "EvaluatorArgs": {
        "type": "object",
        "required": [
          "build_version_args",
          "consensus_proposals_args",
          "consensus_round_args",
          "consensus_timeouts_args",
          "handshake_args",
          "hardware_args",
          "latency_args",
          "network_minimum_peers_args",
          "network_peers_tolerance_args",
          "node_identity_args",
          "state_sync_version_args",
          "transaction_availability_args"
        ],
        "properties": {
          "build_version_args": {
            "$ref": "#/components/schemas/BuildVersionEvaluatorArgs"
          },
          "consensus_proposals_args": {
            "$ref": "#/components/schemas/ConsensusProposalsEvaluatorArgs"
          },
          "consensus_round_args": {
            "$ref": "#/components/schemas/ConsensusRoundEvaluatorArgs"
          },
          "consensus_timeouts_args": {
            "$ref": "#/components/schemas/ConsensusTimeoutsEvaluatorArgs"
          },
          "handshake_args": {
            "$ref": "#/components/schemas/HandshakeEvaluatorArgs"
          },
          "hardware_args": {
            "$ref": "#/components/schemas/HardwareEvaluatorArgs"
          },
          "latency_args": {
            "$ref": "#/components/schemas/LatencyEvaluatorArgs"
          },
          "network_minimum_peers_args": {
            "$ref": "#/components/schemas/NetworkMinimumPeersEvaluatorArgs"
          },
          "network_peers_tolerance_args": {
            "$ref": "#/components/schemas/NetworkPeersWithinToleranceEvaluatorArgs"
          },
          "node_identity_args": {
            "$ref": "#/components/schemas/NodeIdentityEvaluatorArgs"
          },
          "state_sync_version_args": {
            "$ref": "#/components/schemas/StateSyncVersionEvaluatorArgs"
          },
          "transaction_availability_args": {
            "$ref": "#/components/schemas/TransactionAvailabilityEvaluatorArgs"
          }
        }
      },
      "HandshakeEvaluatorArgs": {
        "type": "object"
      },
      "HardwareEvaluatorArgs": {
        "type": "object",
        "required": [
          "min_cpu_cores",
          "min_ram_gb"
        ],
        "properties": {
          "min_cpu_cores": {
            "type": "integer",
            "format": "uint64",
            "description": "The minimum number of physical CPU cores the machine must have."
          },
          "min_ram_gb": {
            "type": "integer",
            "format": "uint64",
            "description": "The minimum amount of RAM in GB (not GiB) the machine must have."
          }
        }
      },
      "LatencyEvaluatorArgs": {
        "type": "object",
        "required": [
          "num_samples",
          "delay_between_samples_ms",
          "num_allowed_errors",
          "max_api_latency_ms"
        ],
        "properties": {
          "num_samples": {
            "type": "integer",
            "format": "uint16",
            "description": "The number of times to hit the node to check latency."
          },
          "delay_between_samples_ms": {
            "type": "integer",
            "format": "uint64",
            "description": "The delay between each call."
          },
          "num_allowed_errors": {
            "type": "integer",
            "format": "uint16",
            "description": "The number of responses that are allowed to be errors."
          },
          "max_api_latency_ms": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "NetworkMinimumPeersEvaluatorArgs": {
        "type": "object",
        "required": [
          "minimum_peers_inbound",
          "minimum_peers_outbound"
        ],
        "properties": {
          "minimum_peers_inbound": {
            "type": "integer",
            "format": "uint64",
            "description": "The minimum number of inbound connections required to be able to pass.\nFor fullnodes, it only matters that this is greater than zero if the\nnode operator wants to seed data to other nodes."
          },
          "minimum_peers_outbound": {
            "type": "integer",
            "format": "uint64",
            "description": "The minimum number of outbound connections required to be able to pass.\nThis must be greater than zero for the node to be able to synchronize."
          }
        }
      },
      "NetworkPeersWithinToleranceEvaluatorArgs": {
        "type": "object",
        "required": [
          "inbound_peers_tolerance",
          "outbound_peers_tolerance"
        ],
        "properties": {
          "inbound_peers_tolerance": {
            "type": "integer",
            "format": "uint64",
            "description": "The evaluator will ensure that the inbound connections count is\nwithin this tolerance of the value retrieved from the baseline."
          },
          "outbound_peers_tolerance": {
            "type": "integer",
            "format": "uint64",
            "description": "The evaluator will ensure that the outbound connections count is\nwithin this tolerance of the value retrieved from the baseline."
          }
        }
      },
      "NodeAddress": {
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "format": "url",
            "description": "Target URL. This should include a scheme (e.g. http://). If there is\nno scheme, we will prepend http://."
          },
          "metrics_port": {
            "type": "integer",
            "format": "uint16",
            "description": "Metrics port.",
            "default": 9101
          },
          "api_port": {
            "type": "integer",
            "format": "uint16",
            "description": "API port.",
            "default": 8080
          },
          "noise_port": {
            "type": "integer",
            "format": "uint16",
            "description": "Validator communication port.",
            "default": 6180
          }
        },
        "example": {
          "url": "http://mynode.mysite.com/",
          "metrics_port": 9101,
          "api_port": 8080,
          "noise_port": 6180
        }
      },
      "NodeConfiguration": {
        "type": "object",
        "required": [
          "node_address",
          "configuration_name",
          "configuration_name_pretty",
          "evaluators",
          "evaluator_args",
          "runner_args"
        ],
        "properties": {
          "node_address": {
            "$ref": "#/components/schemas/NodeAddress"
          },
          "configuration_name": {
            "type": "string",
            "description": "This is the name we expect clients to send over the wire to select\nwhich configuration they want to use. e.g. devnet_fullnode"
          },
          "configuration_name_pretty": {
            "type": "string",
            "description": "This is the name we will show for this configuration to users.\nFor example, if someone opens the NHC frontend, they will see this name\nin a dropdown list of configurations they can test their node against.\ne.g. \"Devnet FullNode\", \"Testnet Validator Node\", etc."
          },
          "evaluators": {
            "type": "array",
            "description": "The evaluators to use, e.g. state_sync_version, consensus_proposals, etc.",
            "items": {
              "type": "string"
            }
          },
          "evaluator_args": {
            "$ref": "#/components/schemas/EvaluatorArgs"
          },
          "runner_args": {
            "$ref": "#/components/schemas/RunnerArgs"
          }
        }
      },
      "NodeIdentityEvaluatorArgs": {
        "type": "object"
      },
      "RunnerArgs": {
        "type": "object",
        "required": [
          "blocking_runner_args"
        ],
        "properties": {
          "blocking_runner_args": {
            "$ref": "#/components/schemas/BlockingRunnerArgs"
          }
        }
      },
      "StateSyncVersionEvaluatorArgs": {
        "type": "object",
        "required": [
          "version_delta_tolerance"
        ],
        "properties": {
          "version_delta_tolerance": {
            "type": "integer",
            "format": "uint64"
          }
        }
      },
      "TransactionAvailabilityEvaluatorArgs": {
        "type": "object"
      }
    }
  }
}
