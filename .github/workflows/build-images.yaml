name: "Build+Push Images"
on: # build on main branch OR when a PR is labeled with `CICD:build-images`
  pull_request:
    types: [labeled, opened, synchronize, reopened]
  push:
    branches:
      # - main - TODO - this disables main branch image building since we assume it's already being built from the auto branch before merging (due to how bors works), possibly reactivate this if we move away from bors
      - auto
      - canary
      - devnet
      - testnet

# cancel redundant builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_DOCKER_ARTIFACT_REPO: ${{ secrets.GCP_DOCKER_ARTIFACT_REPO }}
  AWS_ECR_ACCOUNT_NUM: ${{ secrets.ENV_ECR_AWS_ACCOUNT_NUM }}
  # In case of pull_request events by default github actions merges main into the PR branch and then runs the tests etc
  # on the prospective merge result instead of only on the tip of the PR.
  # We want to avoid this in case of docker image builds on PRs since want more predictable images then correspond to the code state a developer pushed from local.
  # Therefore we build the images with the head of the PR branch instead of the prospective merge result.
  # Safety-wise the merge queue (bors/kodiak or whatever we use) will retest the PR branch merged with the base branch anyways.
  # In case of push events, this hack is a noop as we default to `github.sha`.
  # For more info also see https://github.com/actions/checkout#checkout-pull-request-head-commit-instead-of-merge-commit
  GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

permissions:
  contents: read
  id-token: write #required for GCP Workload Identity federation which we use to login into Google Artifact Registry
  issues: write
  pull-requests: write

jobs:
  rust-images:
    # trigger only for push events (on protected branches as defined above) OR on PR events with the "CICD:build-images" label.
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CICD:build-images') }}
    strategy:
      matrix:
        IMAGE_TARGET: [release, test]

    runs-on: high-perf-docker
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_SHA }}

      - uses: ./.github/actions/gar-auth
        with:
          GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ENV_ECR_AWS_ACCOUNT_NUM }}.dkr.ecr.us-west-2.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: ./.github/actions/docker-buildx-setup

      - name: Build and Push Rust images
        run: docker/docker-bake-rust-all.sh
        env:
          IMAGE_TARGET: ${{ matrix.IMAGE_TARGET }}
          GIT_BRANCH: ${{ github.head_ref }}

  sdk-integration-test:
    needs: rust-images
    uses: ./.github/workflows/sdk-integration-test.yaml
    secrets: inherit
    with:
      GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

  forge-e2e-test:
    needs: rust-images
    uses: ./.github/workflows/run-forge.yaml
    secrets: inherit
    with:
      GIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

  community-platform:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CICD:build-images') }}
    runs-on: high-perf-docker
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_SHA }}

      - uses: ./.github/actions/gar-auth
        with:
          GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ENV_ECR_AWS_ACCOUNT_NUM }}.dkr.ecr.us-west-2.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: ./.github/actions/docker-buildx-setup

      - name: Build and Push Community Platform image
        env:
          GIT_BRANCH: ${{ github.head_ref }}
        run: |
          cd ecosystem/platform/server
          docker buildx bake --progress=plain --push -f ./docker-bake.hcl

  indexer-server:
    if: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'CICD:build-images') }}
    runs-on: high-perf-docker
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GIT_SHA }}

      - uses: ./.github/actions/gar-auth
        with:
          GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ENV_ECR_AWS_ACCOUNT_NUM }}.dkr.ecr.us-west-2.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - uses: ./.github/actions/docker-buildx-setup

      - name: Build and Push Indexer Server image
        env:
          GIT_BRANCH: ${{ github.head_ref }}
        run: |
          cd ecosystem/indexer-server
          docker buildx bake --progress=plain --push -f ./docker-bake.hcl
