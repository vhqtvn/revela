name: ci-test

on:
  pull_request:
    branches: [main]

defaults:
  run:
    shell: bash

env:
  max_threads: 16
  pre_command: cd /opt/git/diem/

jobs:
#  dev-setup-sh-test:
#    runs-on: ubuntu-20.04-xl
#    timeout-minutes: 30
#    needs: prepare
#    if: ${{ needs.prepare.outputs.test-dev-setup == 'true' }}
#    strategy:
#      fail-fast: false
#      matrix:
#        target_os: [alpine, arch, github]
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#      - name: build image with dev-setup.sh
#        run: docker build -f docker/ci/${{ matrix.target_os }}/Dockerfile -t diem/build_environment:test .
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  build-images:
#    runs-on: ubuntu-20.04-xl
#    needs: prepare
#    if: ${{ github.event_name == 'push' && needs.prepare.outputs.build-images == 'true' }}
#    outputs:
#      head-tag: ${{ steps.push-to-novi-ecr.outputs.head-tag }}
#    environment:
#      name: Docker
#    strategy:
#      matrix:
#        target_images:
#          [faucet forge, init tools validator validator-tcb]
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          fetch-depth: 0 #get all the history!!!
#      - id: changes
#        name: determine changes
#        uses: diem/actions/changes@faadd16607b77dfa2231a8f366883e01717b3225
#        with:
#          workflow-file: docker-publish.yml
#      - name: setup_aws_ecr_login
#        run: |
#          echo 'AWS_ECR_ACCOUNT_URL=${{ secrets.ENV_NOVI_ECR_AWS_ACCOUNT_NUM }}.dkr.ecr.${{ secrets.ENV_NOVI_ECR_AWS_REGION }}.amazonaws.com' >> $GITHUB_ENV
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.ENV_NOVI_ECR_AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.ENV_NOVI_ECR_AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ secrets.ENV_NOVI_ECR_AWS_REGION }}
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1.3.3
#      - name: Sign in to dockerhub, install image signing cert.
#        uses: ./.github/actions/dockerhub_login
#        with:
#          username: ${{ secrets.ENV_DOCKERHUB_USERNAME }}
#          password: ${{ secrets.ENV_DOCKERHUB_PASSWORD }}
#          key_material: ${{ secrets.ENV_DOCKERHUB_KEY_MATERIAL }}
#          key_name: ${{ secrets.ENV_DOCKERHUB_KEY_NAME }}
#          key_password: ${{ secrets.ENV_DOCKERHUB_KEY_PASSWORD }}
#      - name: pre-release docker images
#        run: |
#          BRANCH="$CHANGES_TARGET_BRANCH"
#          echo Target Images: ${{ matrix.target_images }}
#          IFS=' ' read -ra TARGET_IMAGES <<< "${{ matrix.target_images }}"
#          success=0
#          tmpfile=$(mktemp)
#          echo "Failed to push:" > "${tmpfile}"
#          for image in "${TARGET_IMAGES[@]}"; do
#            docker/build_push.sh -u -p -b ${BRANCH} -n "$image" || success=$(echo "$image" >> "${tmpfile}"; echo 1)
#          done
#          if [[ "$success" == "1" ]]; then
#            cat "${tmpfile}"
#          fi
#          exit $success
#        env:
#          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: ${{ secrets.ENV_DOCKERHUB_KEY_PASSWORD }}
#      - name: push to novi ecr
#        id: push-to-novi-ecr
#        run: |
#          #push to novi ecr with standard names
#          BRANCH="$CHANGES_TARGET_BRANCH"
#          GIT_REV=$(git rev-parse --short=8 HEAD)
#          echo "::set-output name=head-tag::land_$GIT_REV";
#          aws ecr get-login-password --region ${{ secrets.ENV_NOVI_ECR_AWS_REGION }} | \
#          docker login --username AWS --password-stdin "${AWS_ECR_ACCOUNT_URL}"
#          docker/docker_republish.sh -t pre_${BRANCH}_${GIT_REV} -o land_${GIT_REV} -r ${AWS_ECR_ACCOUNT_URL} -d -i "${{ matrix.target_images }}"
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  need-base-images:
#    runs-on: self-hosted
#    needs: prepare
#    if: ${{ github.event_name == 'push' && needs.prepare.outputs.build-images == 'true' && needs.prepare.outputs.need-base-images == 'true' }}
#    outputs:
#      # The last matrix build to succeed will set the output.   Hilarious.
#      prev-tag: ${{ steps.build-extra-images.outputs.prev-tag }}
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#          fetch-depth: 0 #get all the history!!!
#      - name: Setup env
#        run: |
#          echo "BASE_GIT_REV=${{ needs.prepare.outputs.changes-base-git-rev }}" >> $GITHUB_ENV
#      - name: find images
#        run: |
#          set +e
#          echo "Will run land_blocking_compat suite"
#          echo "Finding a previous image tag to test against"
#          .github/actions/land-blocking/find-lbt-images.sh > lbt_images_output.txt
#          if [ $? -ne 0 ]; then
#            echo "BUILD_PREV=1" >> $GITHUB_ENV
#            cat lbt_images_output.txt
#            jq -n \
#            --arg msg "*${{ github.job }}* job in ${{ github.workflow }} workflow failed. Could not find a recent image tag for Compat Test" \
#            --arg url "https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}" \
#            '{
#              "attachments": [
#              {
#                "text": $msg,
#                "actions": [
#                {
#                  "type": "button",
#                  "text": "Visit Job",
#                  "url": $url
#                }
#                ]
#              }
#              ]
#            }' > /tmp/payload
#            curl -X POST -H 'Content-type: application/json' -d @/tmp/payload ${{ secrets.WEBHOOK_FLAKY_LAND_BLOCKING_CT }}
#          else
#            compat_prev_tag=$(tail -1 lbt_images_output.txt)
#            echo "Using previous image tag $compat_prev_tag"
#            echo "PREV_TAG=$compat_prev_tag" >> $GITHUB_ENV
#            echo "BUILD_PREV=0" >> $GITHUB_ENV
#          fi
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  forge-test:
#    runs-on: ubuntu-20.04-xl
#    timeout-minutes: 40
#    needs: prepare
#    if: ${{ needs.prepare.outputs.test-rust == 'true' && needs.prepare.outputs.test-compatibility == 'true' }}
#    container:
#      image: ghcr.io/diem/aptos_build_environment:${{ needs.prepare.outputs.changes-target-branch }}
#      volumes:
#        - "${{github.workspace}}:/opt/git/diem"
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#          fetch-depth: 0 #get all the history!!!
#      - uses: ./.github/actions/build-setup
#      - uses: actions/cache@v2.1.6
#        with:
#          path: "/opt/cargo/git\n/opt/cargo/registry\n/opt/cargo/.package-cache"
#          key: crates-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}
#          restore-keys: "crates-${{ runner.os }}"
#      - name: compatibility tests
#        run: |
#          $pre_command && cargo test -p testcases --test forge-local-compatibility
#      - uses: ./.github/actions/build-teardown
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  docker-compose-test:
#    runs-on: ubuntu-20.04-xl
#    timeout-minutes: 40
#    needs: prepare
#    if: ${{ needs.prepare.outputs.test-docker-compose == 'true' }}
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#      - name: build validator docker image
#        run: docker/aptos-build.sh docker/validator/Dockerfile diem/validator:test
#      - name: build faucet image
#        run: docker/aptos-build.sh docker/faucet/Dockerfile diem/faucet:test
#      - name: run validator-client test
#        run: docker/compose/test_docker_compose.sh
#        env:
#          # this overrides the default docker tag of "testnet"
#          IMAGE_TAG: "test"
#      - name: run sdk-compatibility tests from main
#        run: cd sdk/compatibility && cargo test -- --include-ignored
#        env:
#          JSON_RPC_URL: "http://127.0.0.1:8080"
#          FAUCET_URL: "http://127.0.0.1:8000"
#      - uses: ./.github/actions/build-teardown
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  helm-test:
#    runs-on: ubuntu-20.04-xl
#    timeout-minutes: 20
#    needs: prepare
#    if: ${{ needs.prepare.outputs.test-helm == 'true' }}
#    steps:
#      - uses: actions/checkout@v2.4.0
#        with:
#          ref: ${{ github.event.pull_request.head.sha }}
#      - name: Check machine details for minikube
#        run: |
#          kubectl version --client
#          helm version
#          lscpu
#      - name: Helm lint
#        working-directory: helm
#        run: helm lint fullnode
#      - name: Install minikube v1.24.0
#        run: |
#          curl -LO https://storage.googleapis.com/minikube/releases/v1.24.0/minikube-linux-amd64
#          checksum="3bc218476cf205acf11b078d45210a4882e136d24a3cbb7d8d645408e423b8fe"
#          filename=minikube-linux-amd64
#          if [[ $(sha256sum $filename | awk '{print $1}') != "$checksum" ]]; then
#            echo "$filename checksum mismatch"
#            exit 1
#          fi
#          # TODO(rustielin): add minikube into scripts/dev_setup.sh
#          sudo install minikube-linux-amd64 /usr/local/bin/minikube
#          rm minikube-linux-amd64
#      - name: Start minikube
#        run: minikube start --driver=docker --cpus=3 --memory=5Gi
#      - name: Wait for node status
#        run: kubectl wait --for=condition=ready node/minikube --timeout=5m
#      - name: Interact with the cluster
#        run: kubectl get nodes
#      - name: Install fullnode helm chart
#        working-directory: helm/fullnode
#        run: |
#          helm install fullnode --set storage.class=standard --set storage.size=10Gi .
#      - name: Wait and check pods
#        run: |
#          echo "Sleep 30s while fullnode starts"
#          sleep 30
#          kubectl wait -l statefulset.kubernetes.io/pod-name=fullnode-aptos-fullnode-0 --for=condition=ready pod --timeout=5m
#          echo "Sleep 1m while fullnode syncs"
#          sleep 60
#          kubectl get pods
#      - name: Run the fullnode helm chart tests
#        working-directory: helm/fullnode
#        run: helm test fullnode --logs
#      - name: Check resources
#        if: ${{ always() }}
#        run: |
#          echo "===== nodes ====="
#          kubectl get nodes
#          kubectl describe nodes
#          echo "===== pvcs ====="
#          kubectl get pvc
#          kubectl describe pvc
#          echo "===== pods ====="
#          kubectl get pods
#          kubectl describe pod fullnode-aptos-fullnode-0
#          kubectl logs fullnode-aptos-fullnode-0
#          kubectl logs fullnode-aptos-fullnode-sync-test
#      - name: Clean up
#        if: ${{ always() }}
#        run: minikube delete
#      - uses: ./.github/actions/build-teardown
#      - name: Early terminate workflow
#        if: ${{ failure() }}
#        uses: ./.github/actions/early-terminator
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#
#  api_spec_test:
#    name: API specification test
#    runs-on: ubuntu-20.04
#    needs: prepare
#    if: ${{ needs.prepare.outputs.test-api-spec == 'true' }}
#    container:
#      image: ghcr.io/diem/aptos_build_environment:${{ needs.prepare.outputs.changes-target-branch }}
#      volumes:
#        - "${{github.workspace}}:/opt/git/diem"
#    steps:
#      - uses: actions/checkout@v2.3.4
#      - uses: ./.github/actions/build-setup
#      - name:
#        working-directory: api
#        run: make test

  developers-site:
    name: run-developer-site-build
    runs-on: ubuntu-20.04
    if: ${{ needs.prepare.outputs.test-website-build == 'true' }}
    steps:
      # Checks-out the Diem website repository under $GITHUB_WORKSPACE, so job can access it
      - uses: actions/checkout@v2.4.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/cache@v2.1.6
      # Installs node and yarn
      - name: Use Node.js 14
        uses: actions/setup-node@v2.4.1
        with:
          node-version: '14'
      # Install git
      - name: Install git
        run: |
          sudo apt --assume-yes update
          sudo apt --assume-yes install git
      # Install Python 3.8
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      # Test that building the site is successful
      - name: Build Site
        run: |
          cd developers.aptoslabs.com
          # Only build the straight Docusaurus site now. Do not build rust `-r`
          # or python docs `-p` on CI checks until we resolve the best way to
          # build them for deployment
          ./scripts/build_docs.sh -b
      - name: Early terminate workflow
        if: ${{ failure() }}
        uses: ./.github/actions/early-terminator
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
